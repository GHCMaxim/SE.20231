{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain } from \"electron\";\nimport { release } from \"node:os\";\nimport { join } from \"node:path\";\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, \"..\");\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\n\t? join(process.env.DIST_ELECTRON, \"../public\")\n\t: process.env.DIST;\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n\tapp.quit();\n\tprocess.exit(0);\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, \"../preload/index.js\");\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(process.env.DIST, \"index.html\");\n\nasync function createWindow() {\n\twin = new BrowserWindow({\n\t\ttitle: \"Main window\",\n\t\ticon: join(process.env.VITE_PUBLIC, \"favicon.ico\"),\n\t\twebPreferences: {\n\t\t\tpreload,\n\t\t\t// Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n\t\t\t// Consider using contextBridge.exposeInMainWorld\n\t\t\t// Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n\t\t\tnodeIntegration: true,\n\t\t\tcontextIsolation: false,\n\t\t},\n\t});\n\n\tif (process.env.VITE_DEV_SERVER_URL) {\n\t\t// electron-vite-vue#298\n\t\twin.loadURL(url);\n\t\t// Open devTool if the app is not packaged\n\t\twin.webContents.openDevTools();\n\t} else {\n\t\twin.loadFile(indexHtml);\n\t}\n\n\t// Test actively push message to the Electron-Renderer\n\twin.webContents.on(\"did-finish-load\", () => {\n\t\twin?.webContents.send(\n\t\t\t\"main-process-message\",\n\t\t\tnew Date().toLocaleString(),\n\t\t);\n\t});\n\n\t// Make all links open with the browser, not with the application\n\twin.webContents.setWindowOpenHandler(({ url }) => {\n\t\tif (url.startsWith(\"https:\")) shell.openExternal(url);\n\t\treturn { action: \"deny\" };\n\t});\n\t// win.webContents.on('will-navigate', (event, url) => { }) #344\n}\n\napp.whenReady().then(createWindow);\n\napp.on(\"window-all-closed\", () => {\n\twin = null;\n\tif (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"second-instance\", () => {\n\tif (win) {\n\t\t// Focus on the main window if the user tried to open another\n\t\tif (win.isMinimized()) win.restore();\n\t\twin.focus();\n\t}\n});\n\napp.on(\"activate\", () => {\n\tconst allWindows = BrowserWindow.getAllWindows();\n\tif (allWindows.length) {\n\t\tallWindows[0].focus();\n\t} else {\n\t\tcreateWindow();\n\t}\n});\n\n// New window example arg: new windows url\nipcMain.handle(\"open-win\", (_, arg) => {\n\tconst childWindow = new BrowserWindow({\n\t\twebPreferences: {\n\t\t\tpreload,\n\t\t\tnodeIntegration: true,\n\t\t\tcontextIsolation: false,\n\t\t},\n\t});\n\n\tif (process.env.VITE_DEV_SERVER_URL) {\n\t\tchildWindow.loadURL(`${url}#${arg}`);\n\t} else {\n\t\tchildWindow.loadFile(indexHtml, { hash: arg });\n\t}\n});\n"],"names":["join","release","app","BrowserWindow","url","shell","ipcMain"],"mappings":";;;;AAcA,QAAQ,IAAI,gBAAgBA,UAAK,KAAA,WAAW,IAAI;AAChD,QAAQ,IAAI,OAAOA,UAAA,KAAK,QAAQ,IAAI,eAAe,SAAS;AAC5D,QAAQ,IAAI,cAAc,QAAQ,IAAI,sBACnCA,UAAA,KAAK,QAAQ,IAAI,eAAe,WAAW,IAC3C,QAAQ,IAAI;AAGf,IAAIC,gBAAU,EAAA,WAAW,KAAK;AAAGC,WAAA,IAAI,4BAA4B;AAGjE,IAAI,QAAQ,aAAa;AAAaA,WAAAA,IAAA,kBAAkBA,aAAI,QAAS,CAAA;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AACrCA,WAAA,IAAI,KAAK;AACT,UAAQ,KAAK,CAAC;AACf;AAOA,IAAI,MAA4B;AAEhC,MAAM,UAAUF,UAAK,KAAA,WAAW,qBAAqB;AACrD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYA,UAAA,KAAK,QAAQ,IAAI,MAAM,YAAY;AAErD,eAAe,eAAe;AAC7B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACvB,OAAO;AAAA,IACP,MAAMH,UAAAA,KAAK,QAAQ,IAAI,aAAa,aAAa;AAAA,IACjD,gBAAgB;AAAA,MACf;AAAA;AAAA;AAAA;AAAA,MAIA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EAAA,CACA;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AAEpC,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY;EAAa,OACvB;AACN,QAAI,SAAS,SAAS;AAAA,EACvB;AAGI,MAAA,YAAY,GAAG,mBAAmB,MAAM;AAC3C,+BAAK,YAAY;AAAA,MAChB;AAAA,OACA,oBAAI,KAAK,GAAE,eAAe;AAAA;AAAA,EAC3B,CACA;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAI,WAAU;AAC7CA,QAAAA,KAAI,WAAW,QAAQ;AAAGC,qBAAM,aAAaD,IAAG;AAC7C,WAAA,EAAE,QAAQ;EAAO,CACxB;AAEF;AAEAF,SAAI,IAAA,UAAY,EAAA,KAAK,YAAY;AAEjCA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AAC3B,QAAA;AACN,MAAI,QAAQ,aAAa;AAAUA,aAAA,IAAI,KAAK;AAC7C,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC/B,MAAI,KAAK;AAER,QAAI,IAAI,YAAY;AAAG,UAAI,QAAQ;AACnC,QAAI,MAAM;AAAA,EACX;AACD,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AAClB,QAAA,aAAaC,uBAAc;AACjC,MAAI,WAAW,QAAQ;AACX,eAAA,CAAC,EAAE;EAAM,OACd;AACO;EACd;AACD,CAAC;AAGDG,SAAA,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AAChC,QAAA,cAAc,IAAIH,uBAAc;AAAA,IACrC,gBAAgB;AAAA,MACf;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EAAA,CACA;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AACpC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EAAA,OAC7B;AACN,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EAC9C;AACD,CAAC;"}